from typing import List, Dict, Optional
from datetime import datetime
from core.telegram_notify import send_telegram_message
import os
from dotenv import load_dotenv
from core.models import User
import logging
from core import manager

logger = logging.getLogger(__name__)

load_dotenv()  # T·∫£i bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')

def calculate_days_until_expiry(expiry_str: str) -> Optional[int]:
    """T√≠nh s·ªë ng√†y c√≤n l·∫°i ƒë·∫øn khi h·∫øt h·∫°n"""
    if not expiry_str:
        return None
    try:
        expiry_date = datetime.strptime(expiry_str, '%Y-%m-%d').date()
        today = datetime.now().date()
        days_left = (expiry_date - today).days
        return days_left
    except:
        return None

def format_expiry_message_for_user(items: List[Dict], item_type: str, user) -> str:
    """Format th√¥ng b√°o h·∫øt h·∫°n cho user c·ª• th·ªÉ"""
    if not items:
        return ""
    
    message = f"‚ö†Ô∏è **C·∫¢NH B√ÅO H·∫æT H·∫†N - {item_type.upper()}** ‚ö†Ô∏è\n\n"
    message += f"üë§ **User:** {user.username}\n"
    message += f"üìÖ **Ng√†y:** {datetime.now().strftime('%d/%m/%Y')}\n\n"
    
    for item in items:
        days_left = calculate_days_until_expiry(item.get('expiry'))
        if days_left is not None:
            if days_left < 0:
                message += f"‚ùå **{item.get('name', 'Unknown')}** - ƒê√£ qu√° h·∫°n {abs(days_left)} ng√†y\n"
            elif days_left == 0:
                message += f"üö® **{item.get('name', 'Unknown')}** - H·∫æT H·∫†N H√îM NAY!\n"
            elif days_left <= 3:
                message += f"üî∂ **{item.get('name', 'Unknown')}** - C√≤n {days_left} ng√†y\n"
            else:
                message += f"üìÖ **{item.get('name', 'Unknown')}** - C√≤n {days_left} ng√†y\n"
    
    # Th√™m th√¥ng tin user
    message += f"\n\nüë§ **Ng∆∞·ªùi nh·∫≠n:** {user.username}"
    if user.role == 'admin':
        message += " (Admin)"
    return message

def format_expiry_message(item: Dict, days_left: int, item_type: str, user: User) -> str:
    """T·∫°o n·ªôi dung th√¥ng b√°o c√° nh√¢n h√≥a, c√≥ ƒë·∫øm ng∆∞·ª£c"""
    name = item.get('name') or item.get('username') or item.get('id')
    service = item.get('service', 'Unknown')
    ip = item.get('ip', 'N/A')
    expiry_date = item.get('expiry')
    # T√≠nh th·ªùi gian ƒë·∫øm ng∆∞·ª£c
    countdown_str = ''
    if expiry_date:
        try:
            dt_expiry = datetime.strptime(expiry_date, '%Y-%m-%d')
            now = datetime.now()
            delta = dt_expiry - now
            total_seconds = int(delta.total_seconds())
            if total_seconds > 0:
                days = total_seconds // 86400
                hours = (total_seconds % 86400) // 3600
                minutes = (total_seconds % 3600) // 60
                countdown_str = f"\n‚è≥ Th·ªùi gian c√≤n l·∫°i: {days} ng√†y {hours} gi·ªù {minutes} ph√∫t"
        except Exception:
            pass
    # Template c∆° b·∫£n
    template = f"‚ö†Ô∏è **C·∫¢NH B√ÅO H·∫æT H·∫†N** ‚ö†Ô∏è\n\n"
    template += f"üî∏ **Lo·∫°i:** {item_type}\n"
    template += f"üî∏ **T√™n:** {name}\n"
    template += f"üî∏ **D·ªãch v·ª•:** {service}\n"
    if ip and ip != 'N/A':
        template += f"üî∏ **IP:** {ip}\n"
    template += f"üî∏ **Ng√†y h·∫øt h·∫°n:** {expiry_date}\n"
    template += f"üî∏ **C√≤n l·∫°i:** {days_left} ng√†y{countdown_str}\n\n"
    # Th√™m c·∫£nh b√°o theo s·ªë ng√†y
    if days_left == 0:
        template += "üö® **H·∫æT H·∫†N H√îM NAY!** üö®\n"
        template += "Vui l√≤ng gia h·∫°n ngay ƒë·ªÉ tr√°nh gi√°n ƒëo·∫°n d·ªãch v·ª•."
    elif days_left == 1:
        template += "‚ö†Ô∏è **H·∫æT H·∫†N NG√ÄY MAI!** ‚ö†Ô∏è\n"
        template += "C·∫ßn gia h·∫°n g·∫•p ƒë·ªÉ duy tr√¨ d·ªãch v·ª•."
    elif days_left <= 3:
        template += "üî∂ **H·∫æT H·∫†N TRONG V√ÄI NG√ÄY T·ªöI** üî∂\n"
        template += "Vui l√≤ng ki·ªÉm tra v√† gia h·∫°n s·ªõm."
    else:
        template += "üìÖ **S·∫ÆP H·∫æT H·∫†N** üìÖ\n"
        template += "Nh·∫Øc nh·ªü gia h·∫°n d·ªãch v·ª•."
    # Th√™m th√¥ng tin user
    template += f"\n\nüë§ **Ng∆∞·ªùi nh·∫≠n:** {user.username}"
    if user.role == 'admin':
        template += " (Admin)"
    return template

def notify_expiry_telegram_per_user(items: List[Dict], item_type: str) -> None:
    """G·ª≠i th√¥ng b√°o h·∫øt h·∫°n cho t·ª´ng user theo gi·ªù v√† ph√∫t c·ªßa h·ªç"""
    now = datetime.now()
    current_hour = now.hour
    current_minute = now.minute
    
    logger.info(f"[Notifier] Checking notifications for {current_hour:02d}:{current_minute:02d}")
    
    # L·∫•y t·∫•t c·∫£ users c√≥ telegram_chat_id
    users = User.query.filter(User.telegram_chat_id.isnot(None)).all()
    logger.info(f"[Notifier] Found {len(users)} users with telegram_chat_id")
    
    for user in users:
        # Ki·ªÉm tra xem c√≥ ph·∫£i gi·ªù v√† ph√∫t g·ª≠i th√¥ng b√°o c·ªßa user n√†y kh√¥ng
        if user.notify_hour != current_hour or user.notify_minute != current_minute:
            logger.debug(f"[Notifier] User {user.username} notify time: {user.notify_hour:02d}:{user.notify_minute:02d}, current: {current_hour:02d}:{current_minute:02d}")
            continue
            
        logger.info(f"[Notifier] G·ª≠i th√¥ng b√°o cho user {user.username} l√∫c {current_hour:02d}:{current_minute:02d}")
        
        # L·ªçc items s·∫Øp h·∫øt h·∫°n theo notify_days c·ªßa user
        expiring_items = []
        for item in items:
            days_left = calculate_days_until_expiry(item.get('expiry'))
            if days_left is not None and days_left <= user.notify_days:
                expiring_items.append(item)
        
        logger.info(f"[Notifier] Found {len(expiring_items)} expiring items for user {user.username}")
        
        if expiring_items:
            # G·ª≠i th√¥ng b√°o chi ti·∫øt v·ªÅ items s·∫Øp h·∫øt h·∫°n
            message = format_expiry_message_for_user(expiring_items, item_type, user)
            success = send_telegram_message(os.getenv('TELEGRAM_TOKEN'), user.telegram_chat_id, message)
            if success:
                logger.info(f"[Notifier] Successfully sent expiry notification to {user.username}")
            else:
                logger.error(f"[Notifier] Failed to send expiry notification to {user.username}")
        else:
            # G·ª≠i th√¥ng b√°o th√¥ng th∆∞·ªùng n·∫øu kh√¥ng c√≥ items s·∫Øp h·∫øt h·∫°n
            message = f"‚úÖ **TH√îNG B√ÅO VPS MANAGER**\n\n"
            message += f"üë§ **User:** {user.username}\n"
            message += f"üìÖ **Ng√†y:** {now.strftime('%d/%m/%Y %H:%M')}\n\n"
            message += f"‚úÖ Kh√¥ng c√≥ items n√†o s·∫Øp h·∫øt h·∫°n trong v√≤ng {user.notify_days} ng√†y t·ªõi."
            success = send_telegram_message(os.getenv('TELEGRAM_TOKEN'), user.telegram_chat_id, message)
            if success:
                logger.info(f"[Notifier] Successfully sent no-expiry notification to {user.username}")
            else:
                logger.error(f"[Notifier] Failed to send no-expiry notification to {user.username}")

def send_daily_summary(user, force=False) -> None:
    """G·ª≠i b√°o c√°o t·ªïng h·ª£p h√†ng ng√†y cho user theo gi·ªù v√† ph√∫t c·ªßa h·ªç"""
    now = datetime.now()
    current_hour = now.hour
    current_minute = now.minute
    
    logger.info(f"[Notifier] send_daily_summary called for user {user.username}, force={force}")
    
    # Ki·ªÉm tra xem c√≥ ph·∫£i gi·ªù v√† ph√∫t g·ª≠i th√¥ng b√°o c·ªßa user kh√¥ng
    if not force and (user.notify_hour != current_hour or user.notify_minute != current_minute):
        logger.debug(f"[Notifier] User {user.username} daily summary time: {user.notify_hour:02d}:{user.notify_minute:02d}, current: {current_hour:02d}:{current_minute:02d}")
        return
        
    logger.info(f"[Notifier] G·ª≠i daily summary cho user {user.username} l√∫c {current_hour:02d}:{current_minute:02d}")
    
    if not user.telegram_chat_id:
        logger.warning(f"[Notifier] User {user.username} has no telegram_chat_id")
        return
    
    logger.info(f"[Notifier] User {user.username} has telegram_chat_id: {user.telegram_chat_id}")
    
    try:
        vps_list = manager.list_vps()
        acc_list = manager.list_accounts()
        logger.info(f"[Notifier] Retrieved {len(vps_list)} VPS and {len(acc_list)} accounts")
        
        # T·∫°o b√°o c√°o t·ªïng h·ª£p
        total_vps = len(vps_list)
        total_accounts = len(acc_list)
        
        expiring_vps = [v for v in vps_list if calculate_days_until_expiry(v.get('expiry')) <= 7]
        expiring_accounts = [a for a in acc_list if calculate_days_until_expiry(a.get('expiry')) <= 7]
        
        logger.info(f"[Notifier] Found {len(expiring_vps)} expiring VPS and {len(expiring_accounts)} expiring accounts")
        
        message = f"""üìä **B√ÅO C√ÅO T·ªîNG H·ª¢P H√ÄNG NG√ÄY**

üë§ **User:** {user.username}
üìÖ **Ng√†y:** {now.strftime('%d/%m/%Y')}
‚è∞ **Gi·ªù:** {now.strftime('%H:%M')}

üñ•Ô∏è **VPS:** {total_vps} m√°y ch·ªß
üìã **Account:** {total_accounts} t√†i kho·∫£n

‚ö†Ô∏è **S·∫Øp h·∫øt h·∫°n (7 ng√†y):**
‚Ä¢ VPS: {len(expiring_vps)} m√°y ch·ªß
‚Ä¢ Account: {len(expiring_accounts)} t√†i kho·∫£n

üîî **C√†i ƒë·∫∑t th√¥ng b√°o:**
‚Ä¢ S·ªë ng√†y c·∫£nh b√°o: {user.notify_days} ng√†y
‚Ä¢ Gi·ªù g·ª≠i th√¥ng b√°o: {user.notify_hour}:00

üí° **L∆∞u √Ω:** Ki·ªÉm tra v√† gia h·∫°n c√°c d·ªãch v·ª• s·∫Øp h·∫øt h·∫°n!"""
        
        logger.info(f"[Notifier] Message length: {len(message)} characters")
        logger.info(f"[Notifier] Sending message to telegram_chat_id: {user.telegram_chat_id}")
        
        token = os.getenv('TELEGRAM_TOKEN')
        logger.info(f"[Notifier] Using token: {token[:10] if token else 'None'}...")
        
        success = send_telegram_message(token, user.telegram_chat_id, message)
        if success:
            logger.info(f"[Notifier] Successfully sent daily summary to {user.username}")
        else:
            logger.error(f"[Notifier] Failed to send daily summary to {user.username}")
            
    except Exception as e:
        logger.error(f"[Notifier] Exception in send_daily_summary: {e}")
        raise e

