#!/usr/bin/env python3
"""
Test d·ªØ li·ªáu th√¥ng b√°o t√†i kho·∫£n s·∫Øp h·∫øt h·∫°n
"""

import os
import sys

# Th√™m th∆∞ m·ª•c g·ªëc v√†o Python path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_notification_data():
    """Test d·ªØ li·ªáu ƒë∆∞·ª£c g·ª≠i ƒë·∫øn notification function"""
    
    print("üß™ Test d·ªØ li·ªáu th√¥ng b√°o t√†i kho·∫£n s·∫Øp h·∫øt h·∫°n...")
    
    try:
        from ui.app import create_app
        from core.models import db, User
        from core import manager
        
        app = create_app()
        
        with app.app_context():
            # Ki·ªÉm tra user admin
            admin = User.query.filter_by(username='admin').first()
            if not admin:
                print("‚ùå Kh√¥ng t√¨m th·∫•y user admin")
                return
            
            print(f"‚úÖ T√¨m th·∫•y user admin: {admin.username} (ID: {admin.id})")
            
            # L·∫•y d·ªØ li·ªáu t√†i kho·∫£n t·ª´ T·∫§T C·∫¢ ngu·ªìn (gi·ªëng nh∆∞ API endpoint)
            print("\nüìä L·∫•y d·ªØ li·ªáu t√†i kho·∫£n t·ª´ t·∫•t c·∫£ ngu·ªìn...")
            
            # 1. T√†i kho·∫£n th·ªß c√¥ng
            manual_acc_list = manager.list_accounts()
            for acc in manual_acc_list:
                if 'service' not in acc:
                    acc['service'] = ''
                acc['source'] = 'manual'  # ƒê√°nh d·∫•u ngu·ªìn
            
            print(f"   üìù Manual accounts: {len(manual_acc_list)}")
            for acc in manual_acc_list:
                print(f"      - {acc.get('username', 'N/A')} ({acc.get('service', 'N/A')}) - Expiry: {acc.get('expiry', 'N/A')}")
            
            # 2. T√†i kho·∫£n t·ª´ BitLaunch
            bitlaunch_apis = manager.list_bitlaunch_apis(admin.id)
            bitlaunch_acc_list = []
            for api in bitlaunch_apis:
                acc = {
                    'id': f"bitlaunch_{api['id']}",
                    'username': api['email'],
                    'service': 'BitLaunch',
                    'expiry': None,  # BitLaunch kh√¥ng c√≥ expiry
                    'balance': api.get('balance', 0),
                    'source': 'bitlaunch'
                }
                bitlaunch_acc_list.append(acc)
            
            print(f"   üöÄ BitLaunch accounts: {len(bitlaunch_acc_list)}")
            for acc in bitlaunch_acc_list:
                print(f"      - {acc.get('username', 'N/A')} - Balance: ${acc.get('balance', 0)}")
            
            # 3. T√†i kho·∫£n t·ª´ ZingProxy
            zingproxy_acc_list = manager.list_zingproxy_accounts(admin.id)
            for acc in zingproxy_acc_list:
                acc['source'] = 'zingproxy'  # ƒê√°nh d·∫•u ngu·ªìn
                # Map fields ƒë·ªÉ ph√π h·ª£p v·ªõi UI
                acc['username'] = acc.get('email', 'N/A')
                acc['service'] = 'ZingProxy'
                acc['expiry'] = None  # ZingProxy kh√¥ng c√≥ expiry
                acc['balance'] = acc.get('balance', 0)  # Th√™m balance
            
            print(f"   üåê ZingProxy accounts: {len(zingproxy_acc_list)}")
            for acc in zingproxy_acc_list:
                print(f"      - {acc.get('username', 'N/A')} - Balance: ${acc.get('balance', 0)}")
            
            # 4. T√†i kho·∫£n t·ª´ CloudFly
            cloudfly_apis = manager.list_cloudfly_apis(admin.id)
            cloudfly_acc_list = []
            for api in cloudfly_apis:
                acc = {
                    'id': f"cloudfly_{api['id']}",
                    'username': api['email'],
                    'service': 'CloudFly',
                    'expiry': None,  # CloudFly kh√¥ng c√≥ expiry
                    'balance': api.get('balance', 0),
                    'source': 'cloudfly'
                }
                cloudfly_acc_list.append(acc)
            
            print(f"   ‚òÅÔ∏è CloudFly accounts: {len(cloudfly_acc_list)}")
            for acc in cloudfly_acc_list:
                print(f"      - {acc.get('username', 'N/A')} - Balance: ${acc.get('balance', 0)}")
            
            # K·∫øt h·ª£p t·∫•t c·∫£ t√†i kho·∫£n
            all_accounts = manual_acc_list + bitlaunch_acc_list + zingproxy_acc_list + cloudfly_acc_list
            
            print(f"\nüìà T·ªïng c·ªông: {len(all_accounts)} t√†i kho·∫£n")
            print(f"   - Manual: {len(manual_acc_list)}")
            print(f"   - BitLaunch: {len(bitlaunch_acc_list)}")
            print(f"   - ZingProxy: {len(zingproxy_acc_list)}")
            print(f"   - CloudFly: {len(cloudfly_acc_list)}")
            
            # Ki·ªÉm tra d·ªØ li·ªáu chi ti·∫øt
            print(f"\nüîç Chi ti·∫øt d·ªØ li·ªáu:")
            for i, acc in enumerate(all_accounts[:5]):  # Hi·ªÉn th·ªã 5 t√†i kho·∫£n ƒë·∫ßu
                print(f"   {i+1}. {acc}")
            
            # Test function notification
            print(f"\nüß™ Test function notification...")
            from core.rocket_chat import send_account_expiry_notification
            
            # Gi·∫£ l·∫≠p config
            mock_config = type('MockConfig', (), {
                'room_id': 'test_room',
                'auth_token': 'test_token',
                'user_id_rocket': 'test_user'
            })()
            
            success = send_account_expiry_notification(
                room_id=mock_config.room_id,
                auth_token=mock_config.auth_token,
                user_id=mock_config.user_id_rocket,
                accounts=all_accounts,
                warning_days=7
            )
            
            print(f"‚úÖ K·∫øt qu·∫£ test: {success}")
                
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_notification_data() 