#!/usr/bin/env python3
"""
Test logic c·∫£nh b√°o t√†i kho·∫£n ƒë√£ h·∫øt h·∫°n
"""

import os
import sys
from datetime import datetime, timedelta

# Th√™m th∆∞ m·ª•c g·ªëc v√†o Python path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_expired_accounts():
    """Test logic c·∫£nh b√°o t√†i kho·∫£n ƒë√£ h·∫øt h·∫°n"""
    
    print("üß™ Test logic c·∫£nh b√°o t√†i kho·∫£n ƒë√£ h·∫øt h·∫°n...")
    
    try:
        from ui.app import create_app
        from core.models import db, User, Account
        from core import manager
        
        app = create_app()
        
        with app.app_context():
            # Ki·ªÉm tra user admin
            admin = User.query.filter_by(username='admin').first()
            if not admin:
                print("‚ùå Kh√¥ng t√¨m th·∫•y user admin")
                return
            
            print(f"‚úÖ T√¨m th·∫•y user admin: {admin.username} (ID: {admin.id})")
            
            # T·∫°o t√†i kho·∫£n test v·ªõi ng√†y h·∫øt h·∫°n kh√°c nhau
            today = datetime.now().date()
            
            test_accounts = [
                {
                    'username': 'expired_1',
                    'service': 'TestService',
                    'expiry': (today - timedelta(days=5)).strftime('%Y-%m-%d'),  # H·∫øt h·∫°n 5 ng√†y tr∆∞·ªõc
                    'source': 'manual'
                },
                {
                    'username': 'expired_2', 
                    'service': 'TestService',
                    'expiry': (today - timedelta(days=1)).strftime('%Y-%m-%d'),  # H·∫øt h·∫°n 1 ng√†y tr∆∞·ªõc
                    'source': 'manual'
                },
                {
                    'username': 'expiring_today',
                    'service': 'TestService', 
                    'expiry': today.strftime('%Y-%m-%d'),  # H·∫øt h·∫°n h√¥m nay
                    'source': 'manual'
                },
                {
                    'username': 'expiring_tomorrow',
                    'service': 'TestService',
                    'expiry': (today + timedelta(days=1)).strftime('%Y-%m-%d'),  # H·∫øt h·∫°n ng√†y mai
                    'source': 'manual'
                },
                {
                    'username': 'expiring_soon',
                    'service': 'TestService',
                    'expiry': (today + timedelta(days=3)).strftime('%Y-%m-%d'),  # H·∫øt h·∫°n trong 3 ng√†y
                    'source': 'manual'
                },
                {
                    'username': 'expiring_later',
                    'service': 'TestService',
                    'expiry': (today + timedelta(days=10)).strftime('%Y-%m-%d'),  # H·∫øt h·∫°n trong 10 ng√†y
                    'source': 'manual'
                }
            ]
            
            print(f"\nüìä Test accounts v·ªõi ng√†y h·∫øt h·∫°n kh√°c nhau:")
            for acc in test_accounts:
                expiry_date = datetime.strptime(acc['expiry'], '%Y-%m-%d').date()
                days_left = (expiry_date - today).days
                status = "üö® ƒê√£ h·∫øt h·∫°n" if days_left < 0 else "‚ö†Ô∏è S·∫Øp h·∫øt h·∫°n" if days_left <= 7 else "‚úÖ C√≤n xa"
                print(f"   ‚Ä¢ {acc['username']}: {acc['expiry']} (c√≤n {days_left} ng√†y) - {status}")
            
            # Test function notification v·ªõi warning_days = 7
            print(f"\nüß™ Test function notification v·ªõi warning_days = 7...")
            from core.rocket_chat import send_account_expiry_notification
            
            # Gi·∫£ l·∫≠p config
            mock_config = type('MockConfig', (), {
                'room_id': 'test_room',
                'auth_token': 'test_token',
                'user_id_rocket': 'test_user'
            })()
            
            success = send_account_expiry_notification(
                room_id=mock_config.room_id,
                auth_token=mock_config.auth_token,
                user_id=mock_config.user_id_rocket,
                accounts=test_accounts,
                warning_days=7
            )
            
            print(f"‚úÖ K·∫øt qu·∫£ test: {success}")
            
            # Test v·ªõi warning_days = 0 (ch·ªâ c·∫£nh b√°o h·∫øt h·∫°n h√¥m nay)
            print(f"\nüß™ Test function notification v·ªõi warning_days = 0...")
            success = send_account_expiry_notification(
                room_id=mock_config.room_id,
                auth_token=mock_config.auth_token,
                user_id=mock_config.user_id_rocket,
                accounts=test_accounts,
                warning_days=0
            )
            
            print(f"‚úÖ K·∫øt qu·∫£ test: {success}")
                
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_expired_accounts() 